Міністерство освіти і науки України
Харківський національний університет радіоелектроніки



Кафедра ПІ




Звіт з практичної роботи №2
з дисципліни «Аналіз та рефакторинг коду»




 
Виконав:
ст. гр. ПЗПІ-22-8
Шапаренко Артем Васильович
Перевірив:
ст. викладач каф. ПІ
Сокорчук Ігор Петрович 







Харків 2024  
Тема: методи рефакторингу коду програмного забезпечення.
Мета: навчитися основним методам рефакторингу коду на основі реальних прикладів своїх власних програмних проєктів, ідентифікувати проблеми в коді та використовувати відповідні методи рефакторингу для покращення його якості.
Хід роботи:
2.1	Replace Array with Object
Посилання на відеоматеріал: https://youtu.be/wPf2rTaadV0 
Цей прийом полягає в передачі всього об’єкта у метод замість передачі кількох його значень як окремих параметрів. Це дозволяє зберігати логіку отримання даних в одному місці (в методі), спрощує модифікацію коду й усуває дублювання. Недоліком може бути зниження гнучкості методу, якщо він стає залежним від конкретного типу об’єкта.
До рефакторингу код має наступний вигляд:

1 public static void main(String[] args) {
2     String[] newSale = new String[3];
3     newSale[0] = “1924”;
4     newSale[1] = “Laptop”;
5     newSale[2] = “1200”;
6 }


Після застосування методу Replace Array with Object наш код виглядає наступним чином:

 
1 public static void main(String[] args) {
2     Sale newSale = new Sale();
3     newSale.setSaleID(1924);
4     newSale.setName("Laptop");
5     newSale.setValue(1200);
6 }

2.2	Replace Exception with Test
Прийом замінює масив, який містить різнорідні дані, на об’єкт із окремими полями для кожного елемента. Це покращує зрозумілість, спрощує документування та дозволяє зберігати пов’язані методи в одному класі. Процес включає створення нового класу, заміну елементів масиву на поля об’єкта та поступове видалення масиву.
До рефакторингу код має наступний вигляд:

1 public String GetValueFromArray(int index) {
2     try {
3         return newSales[index];
4     } catch (ArrayIndexOutOfBoundsException e) {
5         return “Error”;
6     }
7 }


Після застосування методу Replace Exception with Test наш код виглядає наступним чином:

 
1 public String GetValueFromArray(int index) {
2     if (index >= newSales.length){
3         return "Error";
4     }
5     return newSales[index];
6 }

2.3	Preserve Whole Object
Цей прийом передбачає заміну винятку на перевірку умови. Використовується для уникнення винятків у випадках, де проста перевірка може запобігти помилці. Це допомагає зберегти винятки для дійсно непередбачуваних ситуацій і зробити код простішим для розуміння та підтримки.
До рефакторингу код має наступний вигляд:

1  public SaleDTO(Integer sale_id, Long check_no,
2                 Date date_sale, Long quantity, 
3                 String good_name, String good_producer,
4                 Integer good_price) {
5      this.sale_id = sale_id;
6      this.check_no = check_no;
7      this.date_sale = date_sale;
8      this.quantity = quantity;
9      this.good_name = good_name;
10     this.good_producer = good_producer;
11     this.good_price = good_price;
12	}

Після застосування методу Preserve Whole Object наш код виглядає наступним чином:
 
1 public SaleDTO(Integer sale_id, Long check_no,
2                Date date_sale, Long quantity, Good good) {
3     this.sale_id = sale_id;
4     this.check_no = check_no;
5     this.date_sale = date_sale;
6     this.quantity = quantity;
7     this.good = good;
8 }

Висновок.
Під час даної практичної роботи я навчився основним методам рефакторингу коду, зрозумів їх переваги та особливості застосування. Було розглянуто такі методи, як Replace Array with Object, Replace Exception with Test і Preserve Whole Object, кожен із яких допомагає вирішувати конкретні проблеми коду. А саме: структурування даних через об’єкти, заміну винятків на перевірку умов і спрощення передачі параметрів у методах. Ці підходи дозволили мені краще зрозуміти, як покращувати якість коду, робити його читабельнішим, зручнішим у підтримці та менш схильним до помилок.

Список використаних джерел:
1.	Мартін Р. Чистий код: створення і рефакторинг за допомогою AGILE. – ФАБУЛА, 2019. 
2.	Сайт з рефакторингу, паттернами дизайну, принципами SOLID. / URL: https://refactoring.guru
3.	Поради з рефакторингу від FreeCodeCamp. / URL: https://www.freecodecamp.org/news/best-practices-for-refactoring-code/
4.	Стаття з рефакторингу коду: значення, переваги та практики. / URL: https://maddevs.io/blog/code-refactoring/ 
Додаток А
 
Рисунок А.1 – Титульний слайд

 
Рисунок А.2 – Що є рефакторингом
 
Рисунок А.3 – Мета рефакторингу коду

 
Рисунок А.4 – Про Replace Array with Object
 
 
Рисунок А.5 – Приклад застосування Replace Array with Object

 
Рисунок А.6 – Про Replace Exception with test
 
 
Рисунок А.7 – Приклад застосування Exception with test

 
Рисунок А.8 – Про Preserve Whole Object
 
 
Рисунок А.9 – Приклад застосування Preserve Whole Object

 
Рисунок А.10 – Висновки
 
 
Рисунок А.11 – Використані джерела

 
Рисунок А.12 – Дякую за увагу
